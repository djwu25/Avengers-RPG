/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package avengersgameproject;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import javax.swing.Timer;

/**
 *
 * @author 20wuduke
 */
public class AvengersTeamScreen extends javax.swing.JFrame {

    /**
     * Creates new form AvengersTeam
     */
    Avenger AvengersChar = new Avenger("The Avengers", 10000, 250);
    Avenger ThanosChar = new Avenger("Thanos", 1000, 200);
    private int indexAvengers = 0, indexThanos = 1;
    private ArrayList<Avenger> characters;
    private int newHealth = 0, 
            timerAssemble = 0, timerThanosAttack = 1, timerThanosHealth = 2, 
            timerAvengersSoul = 3, timerCivilWarDouble = 4, timerCivilWar = 5, timerAvengersAssemble = 6, 
            timerAvengersHalf = 7, timerSnapThanos = 8, timerDoubleAssemble = 9, timerDoubleAvengersAssemble = 10,
            timerSnapAvengers = 11, totalTimers = 12;
    private Timer[] timers;
    private boolean thanosTarget = false, mindControl = false, thanosHeadCut = false,
            wakanda = false;
    public static boolean victoryLaunch = false, defeatLaunch = false;
    public AvengersTeamScreen() {
        initComponents();
        enableButtons(true);
        timers = new Timer[13];
        characters = new ArrayList<Avenger>();
        characters.add(AvengersChar);
        characters.add(ThanosChar);
    }
    
    private void enableButtons( boolean flag )
    {
        AvengersAssemble.setEnabled(flag);
        Run.setEnabled(flag);
        WakandaForever.setEnabled(flag);
        CivilWar.setEnabled(flag);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        TopLine = new javax.swing.JTextField();
        BottomLine = new javax.swing.JTextField();
        ThanosName = new javax.swing.JTextField();
        ThanosHealth = new javax.swing.JProgressBar();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        AvengersHealth = new javax.swing.JProgressBar();
        Run = new javax.swing.JButton();
        CivilWar = new javax.swing.JButton();
        WakandaForever = new javax.swing.JButton();
        AvengersAssemble = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        Background = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(null);

        TopLine.setEditable(false);
        TopLine.setFont(new java.awt.Font("Perpetua Titling MT", 0, 24)); // NOI18N
        TopLine.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        TopLine.setText("the avengers fight thanos");
        TopLine.setBorder(null);
        getContentPane().add(TopLine);
        TopLine.setBounds(0, 0, 630, 70);

        BottomLine.setEditable(false);
        BottomLine.setFont(new java.awt.Font("Perpetua Titling MT", 0, 24)); // NOI18N
        BottomLine.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        BottomLine.setText("what should the avengers do?");
        BottomLine.setBorder(null);
        BottomLine.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BottomLineActionPerformed(evt);
            }
        });
        getContentPane().add(BottomLine);
        BottomLine.setBounds(0, 70, 630, 70);

        ThanosName.setBackground(new java.awt.Color(240, 240, 240));
        ThanosName.setFont(new java.awt.Font("Tempus Sans ITC", 1, 24)); // NOI18N
        ThanosName.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        ThanosName.setText("THANOS");
        getContentPane().add(ThanosName);
        ThanosName.setBounds(340, 140, 290, 50);

        ThanosHealth.setBackground(new java.awt.Color(255, 0, 0));
        ThanosHealth.setForeground(new java.awt.Color(0, 204, 0));
        ThanosHealth.setMaximum(1000);
        ThanosHealth.setValue(1000);
        getContentPane().add(ThanosHealth);
        ThanosHealth.setBounds(340, 190, 290, 14);

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/avengersgameproject/SmallThanos.png"))); // NOI18N
        getContentPane().add(jLabel1);
        jLabel1.setBounds(380, 220, 200, 270);

        jTextField1.setBackground(new java.awt.Color(240, 240, 240));
        jTextField1.setFont(new java.awt.Font("Tempus Sans ITC", 1, 24)); // NOI18N
        jTextField1.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField1.setText("THE AVENGERS");
        getContentPane().add(jTextField1);
        jTextField1.setBounds(-1, 350, 250, 60);

        AvengersHealth.setBackground(new java.awt.Color(255, 0, 0));
        AvengersHealth.setForeground(new java.awt.Color(0, 204, 0));
        AvengersHealth.setMaximum(10000);
        AvengersHealth.setValue(10000);
        getContentPane().add(AvengersHealth);
        AvengersHealth.setBounds(0, 410, 250, 14);

        Run.setFont(new java.awt.Font("Serif", 0, 18)); // NOI18N
        Run.setText("Run");
        Run.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RunActionPerformed(evt);
            }
        });
        getContentPane().add(Run);
        Run.setBounds(440, 580, 190, 50);

        CivilWar.setFont(new java.awt.Font("Serif", 0, 18)); // NOI18N
        CivilWar.setText("Civil War");
        CivilWar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CivilWarActionPerformed(evt);
            }
        });
        getContentPane().add(CivilWar);
        CivilWar.setBounds(440, 530, 190, 50);

        WakandaForever.setFont(new java.awt.Font("Serif", 0, 18)); // NOI18N
        WakandaForever.setText("Wakanda Forever");
        WakandaForever.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                WakandaForeverActionPerformed(evt);
            }
        });
        getContentPane().add(WakandaForever);
        WakandaForever.setBounds(250, 580, 190, 50);

        AvengersAssemble.setFont(new java.awt.Font("Serif", 0, 18)); // NOI18N
        AvengersAssemble.setText("Avengers Assemble");
        AvengersAssemble.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AvengersAssembleActionPerformed(evt);
            }
        });
        getContentPane().add(AvengersAssemble);
        AvengersAssemble.setBounds(250, 530, 190, 50);

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/avengersgameproject/rsz_duke (1).png"))); // NOI18N
        getContentPane().add(jLabel2);
        jLabel2.setBounds(10, 410, 230, 210);

        Background.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Background.setIcon(new javax.swing.ImageIcon(getClass().getResource("/avengersgameproject/Background.jpg"))); // NOI18N
        getContentPane().add(Background);
        Background.setBounds(0, 0, 630, 630);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BottomLineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BottomLineActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_BottomLineActionPerformed

    private void AvengersAssembleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AvengersAssembleActionPerformed
        enableButtons(false);
        if(mindControl && wakanda)
        {
            wakanda = false;
            mindControl = false;
            TopLine.setText( characters.get(indexAvengers).getName() + "  is confused under the Mind Stone" );
            BottomLine.setText( characters.get(indexAvengers).getName() + " hit the Avengers under Wakanda spirit" );
            characters.get(indexAvengers).setStrength(characters.get(indexAvengers).getStrength()*2);
            characters.get(indexAvengers).useMove(characters.get(indexAvengers).getBasicMove(), 
                    characters.get(indexAvengers), characters.get(indexAvengers));
            newHealth = characters.get(indexAvengers).getHealth();
            timers[timerDoubleAvengersAssemble] = new Timer(10, new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    AvengersHealthDecreaseDoubleAssemble();
                    if(characters.get(indexAvengers).getHealth() == 0)
                        checkGameState();
                }
            } );
            timers[timerDoubleAvengersAssemble].start();
            characters.get(indexAvengers).setStrength(80);
            ThanosAttack();
            return;
        }
        if(wakanda)
        {
            wakanda = false;
            TopLine.setText( characters.get(indexAvengers).getName() + " assembled with Wakanda spirit" );
            BottomLine.setText( characters.get(indexAvengers).getName() + " did double the damage!" );
            characters.get(indexAvengers).setStrength(characters.get(indexAvengers).getStrength()*2);
            characters.get(indexAvengers).useMove(characters.get(indexAvengers).getBasicMove(), 
                    characters.get(indexAvengers), characters.get(indexThanos));
            newHealth = characters.get(indexThanos).getHealth();
            timers[timerDoubleAssemble] = new Timer(10, new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    ThanosHealthDecreaseDoubleAssemble();
                    if(characters.get(indexThanos).getHealth() == 0)
                        checkGameState();
                }
            } );
            timers[timerDoubleAssemble].start();
            characters.get(indexAvengers).setStrength(80);
            ThanosAttack();
            return;
        }
        if(thanosTarget)
        {
            TopLine.setText( characters.get(indexAvengers).getName() + " assembled against nothing" );
            BottomLine.setText( characters.get(indexAvengers).getName() + " all missed" );
            thanosTarget = false;
            ThanosAttack();
            return;
        }
        if(mindControl)
        {
            mindControl = false;
            TopLine.setText( characters.get(indexAvengers).getName() + " are confused" );
            BottomLine.setText( characters.get(indexAvengers).getName() + " assembled against themselves" );
            newHealth = characters.get(indexAvengers).getHealth() - characters.get(indexAvengers).getStrength();
            timers[timerAvengersAssemble] = new Timer(10, new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    AvengersHealthAssembleDecrease();
                    if(characters.get(indexAvengers).getHealth() == 0)
                        checkGameState();
                }
            } );
            timers[timerAvengersAssemble].start();
            ThanosAttack();
            return;
        }
        characters.get(indexAvengers).useMove(characters.get(indexAvengers).getBasicMove(), 
                characters.get(indexAvengers), characters.get(indexThanos));
        newHealth = characters.get(indexThanos).getHealth();
        TopLine.setText( characters.get(indexAvengers).getName() + " assembled against " + characters.get(indexThanos).getName());
        BottomLine.setText( "Assembling did some damage" );
        timers[timerAssemble] = new Timer(10, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                ThanosHealthDecreaseAssemble();
                if(characters.get(indexThanos).getHealth() == 0)
                    checkGameState();
            }
        } );
        timers[timerAssemble].start();
        ThanosAttack();
    }//GEN-LAST:event_AvengersAssembleActionPerformed

    private void CivilWarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CivilWarActionPerformed
        enableButtons(false);
        if(wakanda && (mindControl || thanosTarget))
        {
            mindControl = false;
            thanosTarget = false;
            wakanda = false;
            characters.get(indexAvengers).setStrength(characters.get(indexAvengers).getStrength()*2);
            TopLine.setText( characters.get(indexAvengers).getName() + " went into a Civil War with spirit" );
            BottomLine.setText( characters.get(indexAvengers).getName() + " attack themselves" );
            newHealth = characters.get(indexAvengers).getHealth() - characters.get(indexAvengers).getStrength();
            timers[timerCivilWarDouble] = new Timer(10, new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    AvengersCivilWarDouble();
                    if(characters.get(indexAvengers).getHealth() == 0)
                        checkGameState();
                }
            } );
            timers[timerCivilWarDouble].start();
            characters.get(indexAvengers).setStrength(250);
            ThanosAttack();
            return;
        }
        TopLine.setText( characters.get(indexAvengers).getName() + " went into a Civil War" );
        BottomLine.setText( characters.get(indexAvengers).getName() + " attack themselves" );
        newHealth = characters.get(indexAvengers).getHealth() - characters.get(indexAvengers).getStrength();
        timers[timerCivilWar] = new Timer(10, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                AvengersCivilWar();
                if(characters.get(indexAvengers).getHealth() == 0)
                    checkGameState();
            }
        } );
        timers[timerCivilWar].start();
        ThanosAttack();
    }//GEN-LAST:event_CivilWarActionPerformed

    private void WakandaForeverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_WakandaForeverActionPerformed
        enableButtons(false);
        if(mindControl)
        {
            mindControl = false;
            TopLine.setText( characters.get(indexAvengers).getName() + " were unable to unite" );
            BottomLine.setText( characters.get(indexAvengers).getName() + " did nothing" );
            ThanosAttack();
            return;
        }
        if(thanosTarget)
        {
            thanosTarget = false;
        }
        wakanda = true;
        TopLine.setText( characters.get(indexAvengers).getName() + " unite in Wakanda" );
        BottomLine.setText( characters.get(indexAvengers).getName() + " double their next ability" );
        ThanosAttack();
    }//GEN-LAST:event_WakandaForeverActionPerformed

    private void RunActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RunActionPerformed
        EndDefeatScreen runScreen = new EndDefeatScreen();
        runScreen.setBounds(0, 0, 646, 658);
        runScreen.setVisible(true);
        setVisible(false);
    }//GEN-LAST:event_RunActionPerformed
    
    private void ThanosHealthDecreaseAssemble()
    {
        if(ThanosHealth.getValue() > newHealth+1)
        {
            characters.get(indexThanos).setHealth(ThanosHealth.getValue()-10);
            ThanosHealth.setValue(ThanosHealth.getValue()-10);
        } else {
            timers[timerAssemble].stop();
        }
    }
    
    private void AvengersHealthAssembleDecrease()
    {
        if(AvengersHealth.getValue() > newHealth+2)
        {
            characters.get(indexAvengers).setHealth(AvengersHealth.getValue()-10);
            AvengersHealth.setValue(AvengersHealth.getValue()-10);
        } else {
            timers[timerAvengersAssemble].stop();
        }
    }
    
    private void AvengersHealthDecreaseDoubleAssemble()
    {
        if(AvengersHealth.getValue() > newHealth+1)
        {
            characters.get(indexAvengers).setHealth(AvengersHealth.getValue()-10);
            AvengersHealth.setValue(AvengersHealth.getValue()-10);
        } else {
            timers[timerDoubleAvengersAssemble].stop();
        }
    }
    
    private void ThanosHealthDecreaseDoubleAssemble()
    {
        if(ThanosHealth.getValue() > newHealth+1)
        {
            characters.get(indexThanos).setHealth(ThanosHealth.getValue()-10);
            ThanosHealth.setValue(ThanosHealth.getValue()-10);
        } else {
            timers[timerDoubleAssemble].stop();
        }
    }
    
    private void AvengersCivilWarDouble()
    {
        if(AvengersHealth.getValue() > newHealth+1)
        {
            characters.get(indexAvengers).setHealth(AvengersHealth.getValue()-10);
            AvengersHealth.setValue(AvengersHealth.getValue()-10);
        } else {
            timers[timerCivilWarDouble].stop();
        }
    }
    
    private void AvengersCivilWar()
    {
        if(AvengersHealth.getValue() > newHealth+1)
        {
            characters.get(indexAvengers).setHealth(AvengersHealth.getValue()-50);
            AvengersHealth.setValue(AvengersHealth.getValue()-50);
        } else {
            timers[timerCivilWar].stop();
        }
    }
    
    private void AvengersHealthHalf()
    {
        if(AvengersHealth.getValue() > newHealth+2)
        {
            characters.get(indexAvengers).setHealth(AvengersHealth.getValue()-50);
            AvengersHealth.setValue(AvengersHealth.getValue()-50);
        } else {
            timers[timerAvengersHalf].stop();
            enableButtons(true);
        }
    }
    
    private void AvengersHealthDeplete()
    {
        if(AvengersHealth.getValue() > newHealth+2)
        {
            characters.get(indexAvengers).setHealth(AvengersHealth.getValue()-50);
            AvengersHealth.setValue(AvengersHealth.getValue()-50);
        } else {
            timers[timerAvengersSoul].stop();
            enableButtons(true);
        }
    }
    
    private void ThanosHealthIncrease()
    {
        if(ThanosHealth.getValue() < 1000)
        {
            characters.get(indexThanos).setHealth(ThanosHealth.getValue()+10);
            ThanosHealth.setValue(ThanosHealth.getValue()+10);
        } else {
            timers[timerThanosHealth].stop();
            enableButtons(true);
        }
    }
    
    private void ThanosSnapThanos()
    {
        if(ThanosHealth.getValue() > newHealth+1)
        {
            characters.get(indexThanos).setHealth(ThanosHealth.getValue()-10);
            ThanosHealth.setValue(ThanosHealth.getValue()-10);
        } else {
            timers[timerSnapThanos].stop();
        }
    }
    
    private void ThanosSnapAvengers()
    {
        if(AvengersHealth.getValue() > newHealth+1)
        {
            characters.get(indexAvengers).setHealth(AvengersHealth.getValue()-10);
            AvengersHealth.setValue(AvengersHealth.getValue()-10);
        } else {
            timers[timerSnapAvengers].stop();
        }
    }
    
    private void ThanosAttack()
    {
        timers[timerThanosAttack] = new Timer(3500, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                ThanosAttackChoice();
            }
        } );
        timers[timerThanosAttack].start();
    }
    
    private void ThanosAttackChoice()
    {
        int stoneAttack = (int)(Math.random()*13);
        System.out.println(stoneAttack);
        if(stoneAttack == 0 || stoneAttack == 1)
        {
            timers[timerThanosHealth] = new Timer(10, new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    ThanosHealthIncrease();
                }
            } );
            timers[timerThanosHealth].start();
            characters.get(indexThanos).setHealth(1000);
            TopLine.setText( characters.get(indexThanos).getName() + " used the Time Stone" );
            BottomLine.setText( characters.get(indexThanos).getName() + " recovered all his HP" );
            timers[timerThanosAttack].stop();
            return;
        }
        if(stoneAttack == 2 || stoneAttack == 3)
        {
            TopLine.setText( characters.get(indexThanos).getName() + " used the Soul Stone" );
            BottomLine.setText( characters.get(indexThanos).getName() + " has stolen your soul!" );
            newHealth = 0;
            timers[timerAvengersSoul] = new Timer(10, new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    AvengersHealthDeplete();
                    if(characters.get(indexAvengers).getHealth() <= 0)
                        checkGameState();
                }
            } );
            timers[timerAvengersSoul].start();
            timers[timerThanosAttack].stop();
            return;
        }
        if(stoneAttack == 4 || stoneAttack == 5)
        {
            TopLine.setText( characters.get(indexThanos).getName() + " used the Reality Stone" );
            BottomLine.setText( characters.get(indexThanos).getName() + " takes another turn" );
            timers[timerThanosAttack].stop();
            ThanosAttack();
            return;
        }
        if(stoneAttack == 6 || stoneAttack == 7)
        {
            TopLine.setText( characters.get(indexThanos).getName() + " used the Space Stone" );
            BottomLine.setText( characters.get(indexThanos).getName() + " has become untargetable" );
            thanosTarget = true;
            timers[timerThanosAttack].stop();
            enableButtons(true);
            return;
        }
        if(stoneAttack == 8 || stoneAttack == 9)
        {
            TopLine.setText( characters.get(indexThanos).getName() + " used the Mind Stone" );
            BottomLine.setText( characters.get(indexThanos).getName() + " now controls you" );
            mindControl = true;
            timers[timerThanosAttack].stop();
            enableButtons(true);
            return;
        }
        if(stoneAttack == 10 || stoneAttack == 11)
        {
            TopLine.setText( characters.get(indexThanos).getName() + " used the Power Stone" );
            BottomLine.setText( characters.get(indexThanos).getName() + " destroyed half your life!" );
            newHealth = AvengersHealth.getValue()/2;
            if(characters.get(indexAvengers).getHealth() <= 10000/8)
            {
                newHealth = 0;
            }
            timers[timerAvengersHalf] = new Timer(10, new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    AvengersHealthHalf();
                    if(characters.get(indexAvengers).getHealth() == 0)
                        checkGameState();
                }
            } );
            timers[timerAvengersHalf].start();
            timers[timerThanosAttack].stop();
            return;
        }
        if( stoneAttack == 12 )
        {
            TopLine.setText( characters.get(indexThanos).getName() + " used Snap" );
            int random = (int)(Math.random()*2);
            if(random == 0)
            {
                BottomLine.setText( characters.get(indexThanos).getName() + " has killed himself" );
                newHealth = 0;
                timers[timerSnapThanos] = new Timer(10, new ActionListener() {
                    @Override
                    public void actionPerformed(ActionEvent e) {
                        ThanosSnapThanos();
                        if(characters.get(indexThanos).getHealth() == 0)
                            checkGameState();
                    }
                } );
                timers[timerSnapThanos].start();
                timers[timerThanosAttack].stop();
                return;
            }
            if(random == 1)
            {
                BottomLine.setText( characters.get(indexThanos).getName() + " has killed you" );
                newHealth = 0;
                timers[timerSnapAvengers] = new Timer(10, new ActionListener() {
                    @Override
                    public void actionPerformed(ActionEvent e) {
                        ThanosSnapAvengers();
                        if(characters.get(indexAvengers).getHealth() == 0)
                            checkGameState();
                    }
                } );
                timers[timerSnapAvengers].start();
                timers[timerThanosAttack].stop();
                return;
            }
            return;
        }
    }
    
    private void checkGameState()
    {
        EndDefeatScreen defeat = new EndDefeatScreen();
        EndVictoryScreen victory = new EndVictoryScreen();
        if(characters.get(indexThanos).getHealth() == 0 && !victoryLaunch)
        {
            victory.setBounds(0, 0, 646, 658);
            victory.setVisible(true);
            setVisible(false);
            victoryLaunch = true;
        }
        if(characters.get(indexAvengers).getHealth() == 0 && !defeatLaunch)
        {
            defeat.setBounds(0, 0, 646, 658);
            defeat.setVisible(true);
            setVisible(false);
            defeatLaunch = true;
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AvengersTeamScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AvengersTeamScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AvengersTeamScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AvengersTeamScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AvengersTeamScreen().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AvengersAssemble;
    private javax.swing.JProgressBar AvengersHealth;
    private javax.swing.JLabel Background;
    private javax.swing.JTextField BottomLine;
    private javax.swing.JButton CivilWar;
    private javax.swing.JButton Run;
    private javax.swing.JProgressBar ThanosHealth;
    private javax.swing.JTextField ThanosName;
    private javax.swing.JTextField TopLine;
    private javax.swing.JButton WakandaForever;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
