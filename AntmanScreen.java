/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package avengersgameproject;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import javax.swing.Timer;

/**
 *
 * @author 19kimmingyou
 */
public class AntmanScreen extends javax.swing.JFrame {

    /**
     * Creates new form Thanos
     */
    Avenger AntmanChar = new Avenger("Antman", 300, 30);
    Avenger ThanosChar = new Avenger("Thanos", 1000, 200);
    private int indexAntman = 0, indexThanos = 1;
    private ArrayList<Avenger> characters;
    private int newHealth = 0, 
            timerSlap = 0, timerT = 1, timerThanosHealth = 2, 
            timerAnt = 3, timerPunch = 4, timerExpand = 5, timerAntSlap = 6, 
            timerAntPunch = 7, timerAntPower = 8, timerSnapThanos = 9, timerSnapAnt = 10, 
            totalTimers = 11;
    private Timer[] timers;
    private boolean shrink = false, expand = false, thanosTarget = false, mindControl = false;
    public static boolean victoryLaunch = false, defeatLaunch = false;
    public AntmanScreen() {
        initComponents();
        enableButtons(true);
        timers = new Timer[11];
        characters = new ArrayList<Avenger>();
        characters.add(AntmanChar);
        characters.add(ThanosChar);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        GameDisplay1 = new javax.swing.JTextField();
        Thanos = new javax.swing.JLabel();
        Antman = new javax.swing.JLabel();
        Shrink = new javax.swing.JButton();
        Slap = new javax.swing.JButton();
        Expand = new javax.swing.JButton();
        Punch = new javax.swing.JButton();
        ThanosHealth = new javax.swing.JProgressBar();
        ThanosHeader = new javax.swing.JTextField();
        jTextField1 = new javax.swing.JTextField();
        AntHealth = new javax.swing.JProgressBar();
        GameDisplay = new javax.swing.JTextField();
        SecondGameDisplay = new javax.swing.JTextField();
        Background = new javax.swing.JLabel();

        GameDisplay1.setFont(new java.awt.Font("Perpetua Titling MT", 0, 24)); // NOI18N
        GameDisplay1.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        GameDisplay1.setText("antman fights thanos!");
        GameDisplay1.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        GameDisplay1.setEnabled(false);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(null);

        Thanos.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Thanos.setIcon(new javax.swing.ImageIcon(getClass().getResource("/avengersgameproject/SmallThanos.png"))); // NOI18N
        Thanos.setMaximumSize(new java.awt.Dimension(301, 750));
        Thanos.setMinimumSize(new java.awt.Dimension(301, 750));
        Thanos.setPreferredSize(new java.awt.Dimension(301, 750));
        getContentPane().add(Thanos);
        Thanos.setBounds(430, 210, 120, 280);

        Antman.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Antman.setIcon(new javax.swing.ImageIcon(getClass().getResource("/avengersgameproject/SmallAntman.png"))); // NOI18N
        getContentPane().add(Antman);
        Antman.setBounds(80, 400, 110, 200);

        Shrink.setFont(new java.awt.Font("Serif", 0, 18)); // NOI18N
        Shrink.setText("Shrink");
        Shrink.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ShrinkActionPerformed(evt);
            }
        });
        getContentPane().add(Shrink);
        Shrink.setBounds(250, 520, 190, 50);

        Slap.setFont(new java.awt.Font("Serif", 0, 18)); // NOI18N
        Slap.setText("Slap");
        Slap.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SlapActionPerformed(evt);
            }
        });
        getContentPane().add(Slap);
        Slap.setBounds(440, 520, 190, 50);

        Expand.setFont(new java.awt.Font("Serif", 0, 18)); // NOI18N
        Expand.setText("Expand");
        Expand.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExpandActionPerformed(evt);
            }
        });
        getContentPane().add(Expand);
        Expand.setBounds(250, 570, 190, 50);

        Punch.setFont(new java.awt.Font("Serif", 0, 18)); // NOI18N
        Punch.setText("Punch");
        Punch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PunchActionPerformed(evt);
            }
        });
        getContentPane().add(Punch);
        Punch.setBounds(440, 570, 190, 50);

        ThanosHealth.setBackground(new java.awt.Color(255, 0, 0));
        ThanosHealth.setForeground(new java.awt.Color(0, 204, 0));
        ThanosHealth.setMaximum(1000);
        ThanosHealth.setValue(1000);
        ThanosHealth.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                ThanosHealthStateChanged(evt);
            }
        });
        getContentPane().add(ThanosHealth);
        ThanosHealth.setBounds(340, 190, 290, 14);

        ThanosHeader.setFont(new java.awt.Font("Tempus Sans ITC", 1, 24)); // NOI18N
        ThanosHeader.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        ThanosHeader.setText("THANOS");
        ThanosHeader.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        ThanosHeader.setEnabled(false);
        ThanosHeader.setFocusable(false);
        getContentPane().add(ThanosHeader);
        ThanosHeader.setBounds(340, 140, 290, 50);

        jTextField1.setFont(new java.awt.Font("Tempus Sans ITC", 1, 24)); // NOI18N
        jTextField1.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField1.setText("ANT-MAN");
        jTextField1.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        jTextField1.setEnabled(false);
        getContentPane().add(jTextField1);
        jTextField1.setBounds(0, 340, 250, 40);

        AntHealth.setBackground(new java.awt.Color(255, 0, 0));
        AntHealth.setForeground(new java.awt.Color(0, 204, 0));
        AntHealth.setMaximum(300);
        AntHealth.setValue(300);
        AntHealth.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                AntHealthStateChanged(evt);
            }
        });
        getContentPane().add(AntHealth);
        AntHealth.setBounds(0, 380, 250, 14);

        GameDisplay.setEditable(false);
        GameDisplay.setFont(new java.awt.Font("Perpetua Titling MT", 0, 24)); // NOI18N
        GameDisplay.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        GameDisplay.setText("antman fights thanos");
        GameDisplay.setBorder(null);
        GameDisplay.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        GameDisplay.setEnabled(false);
        getContentPane().add(GameDisplay);
        GameDisplay.setBounds(0, 0, 630, 70);

        SecondGameDisplay.setEditable(false);
        SecondGameDisplay.setFont(new java.awt.Font("Perpetua Titling MT", 0, 24)); // NOI18N
        SecondGameDisplay.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        SecondGameDisplay.setText("what should antman do?");
        SecondGameDisplay.setBorder(null);
        SecondGameDisplay.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        SecondGameDisplay.setEnabled(false);
        getContentPane().add(SecondGameDisplay);
        SecondGameDisplay.setBounds(0, 70, 630, 70);

        Background.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Background.setIcon(new javax.swing.ImageIcon(getClass().getResource("/avengersgameproject/Background.jpg"))); // NOI18N
        getContentPane().add(Background);
        Background.setBounds(0, 0, 630, 620);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ThanosHealthStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_ThanosHealthStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_ThanosHealthStateChanged

    private void AntHealthStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_AntHealthStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_AntHealthStateChanged

    private void ShrinkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ShrinkActionPerformed
        enableButtons(false);
        if(mindControl)
        {
            mindControl = false;
            GameDisplay.setText( characters.get(indexAntman).getName() + " was unable to use Shrink" );
            SecondGameDisplay.setText( characters.get(indexAntman).getName() + " did nothing" );
            ThanosAttack();
            return;
        }
        if(thanosTarget)
        {
            thanosTarget = false;
            if(!shrink && !expand)
            {
                shrink = true;
            }
        }
        if(!shrink && !expand)
        {
            shrink = true;
        }
        if(expand)
        {
            shrink = false;
            expand = false;
            characters.get(indexAntman).setStrength(characters.get(indexAntman).getStrength()/2);
            GameDisplay.setText( characters.get(indexAntman).getName() + " used Shrink" );
            SecondGameDisplay.setText( characters.get(indexAntman).getName() + " has returned to a normal size" );
        }
        GameDisplay.setText( characters.get(indexAntman).getName() + " used Shrink" );
        SecondGameDisplay.setText( characters.get(indexAntman).getName() + " is now inside Thanos" );
        ThanosAttack();
    }//GEN-LAST:event_ShrinkActionPerformed

    private void SlapActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SlapActionPerformed
        enableButtons(false);
        if(shrink)
        {
            GameDisplay.setText( characters.get(indexAntman).getName() + " used Slap while small" );
            SecondGameDisplay.setText( "Too small to deal damage. . . " );
            ThanosAttack();
            return;
        }
        if(thanosTarget)
        {
            GameDisplay.setText( characters.get(indexAntman).getName() + " used Slap at nothing" );
            SecondGameDisplay.setText( characters.get(indexAntman).getName() + " missed" );
            thanosTarget = false;
            ThanosAttack();
            return;
        }
        if(mindControl)
        {
            GameDisplay.setText( characters.get(indexAntman).getName() + " is confused under the Mind Stone" );
            SecondGameDisplay.setText( characters.get(indexAntman).getName() + " hit himself" );
            characters.get(indexAntman).useMove(characters.get(indexAntman).getBasicMove(), 
                    characters.get(indexAntman), characters.get(indexAntman));
            newHealth = characters.get(indexAntman).getHealth();
            timers[timerAntSlap] = new Timer(10, new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    AntmanHealthSlapDecrease();
                    if(characters.get(indexAntman).getHealth() == 0)
                        checkGameState();
                }
            } );
            timers[timerAntSlap].start();
            ThanosAttack();
            mindControl = false;
            return;
        }
        characters.get(indexAntman).useMove(characters.get(indexAntman).getBasicMove(), 
                characters.get(indexAntman), characters.get(indexThanos));
        newHealth = characters.get(indexThanos).getHealth();
        GameDisplay.setText( characters.get(indexAntman).getName() + " used Slap on " + characters.get(indexThanos).getName());
        SecondGameDisplay.setText( "Slap was ineffective. . . " );
        timers[timerSlap] = new Timer(10, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                ThanosHealthDecreaseSlap();
                if(characters.get(indexThanos).getHealth() == 0)
                    checkGameState();
            }
        } );
        timers[timerSlap].start();
        ThanosAttack();
    }//GEN-LAST:event_SlapActionPerformed
 
    private void ExpandActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExpandActionPerformed
        enableButtons(false);
        if(mindControl)
        {
            mindControl = false;
            GameDisplay.setText( characters.get(indexAntman).getName() + " was unable to use Expand" );
            SecondGameDisplay.setText( characters.get(indexAntman).getName() + " did nothing" );
            ThanosAttack();
            return;
        }
        if(thanosTarget)
        {
            if(!expand && !shrink)   
            {
                expand = true;
                characters.get(indexAntman).setStrength(2*characters.get(indexAntman).getStrength());
            }
        }
        if(!expand && !shrink)   
        {
            expand = true;
            characters.get(indexAntman).setStrength(2*characters.get(indexAntman).getStrength());
        }
        if(shrink && !thanosTarget)
        {
            newHealth = 0;
            timers[timerExpand] = new Timer(10, new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    ThanosHealthDecreaseExpand();
                    if(characters.get(indexThanos).getHealth() == 0)
                        checkGameState();
                }
            } );
            timers[timerExpand].start();
            GameDisplay.setText( characters.get(indexAntman).getName() + " used Expand while inside Thanos" );
            SecondGameDisplay.setText( "Expand was super-effective!!" );
            return;
        } else if(shrink){
            shrink = false;
        }
        GameDisplay.setText( characters.get(indexAntman).getName() + " used Expand" );
        SecondGameDisplay.setText( "Expand did nothing to Thanos. . . " );
        ThanosAttack();
    }//GEN-LAST:event_ExpandActionPerformed

    private void PunchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PunchActionPerformed
        enableButtons(false);
        if(shrink)
        {
            GameDisplay.setText( characters.get(indexAntman).getName() + " used Punch while small" );
            SecondGameDisplay.setText( "Too small to deal damage. . . " );
            ThanosAttack();
            return;
        }
        if(thanosTarget)
        {
            GameDisplay.setText( characters.get(indexAntman).getName() + " used Punch at nothing" );
            SecondGameDisplay.setText( characters.get(indexAntman).getName() + " missed" );
            thanosTarget = false;
            ThanosAttack();
            return;
        }
        if(mindControl)
        {
            GameDisplay.setText( characters.get(indexAntman).getName() + " is confused under the Mind Stone" );
            SecondGameDisplay.setText( characters.get(indexAntman).getName() + " hit himself" );
            characters.get(indexAntman).useMove(characters.get(indexAntman).getSecondaryMove(), characters.get(indexAntman), characters.get(indexAntman));
            newHealth = characters.get(indexAntman).getHealth();
            timers[timerAntPunch] = new Timer(10, new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    AntmanHealthPunchDecrease();
                    if(characters.get(indexAntman).getHealth() == 0)
                        checkGameState();
                }
            } );
            timers[timerAntPunch].start();
            ThanosAttack();
            mindControl = false;
            return;
        }
        characters.get(indexAntman).useMove(characters.get(indexAntman).getSecondaryMove(), characters.get(indexAntman), characters.get(indexThanos));
        newHealth = characters.get(indexThanos).getHealth();
        GameDisplay.setText( characters.get(indexAntman).getName() + " used Punch on " + characters.get(indexThanos).getName());
        SecondGameDisplay.setText( "Punch was ineffective. . . " );
        if(expand)
        {
            SecondGameDisplay.setText( "Punch dealt some damage." );
        }
        timers[timerPunch] = new Timer(10, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                ThanosHealthDecreasePunch();
                if(characters.get(indexThanos).getHealth() == 0)
                    checkGameState();
            }
        } );
        timers[timerPunch].start();
        ThanosAttack();
    }//GEN-LAST:event_PunchActionPerformed

    private void ThanosHealthDecreaseSlap()
    {
        if(ThanosHealth.getValue() > newHealth+1)
        {
            characters.get(indexThanos).setHealth(ThanosHealth.getValue()-10);
            ThanosHealth.setValue(ThanosHealth.getValue()-10);
        } else {
            timers[timerSlap].stop();
        }
    }
    
    private void ThanosHealthDecreaseExpand()
    {
        if(ThanosHealth.getValue() > newHealth+1)
        {
            
            characters.get(indexThanos).setHealth(ThanosHealth.getValue()-10);
            ThanosHealth.setValue(ThanosHealth.getValue()-10);
        } else {
            timers[timerExpand].stop();
        }
    }
    
    private void ThanosHealthDecreasePunch()
    {
        if(ThanosHealth.getValue() > newHealth+1)
        {
            
            characters.get(indexThanos).setHealth(ThanosHealth.getValue()-10);
            ThanosHealth.setValue(ThanosHealth.getValue()-10);
        } else {
            timers[timerPunch].stop();
        }
    }
    
    private void ThanosSnapThanos()
    {
        if(ThanosHealth.getValue() > newHealth+1)
        {
            
            characters.get(indexThanos).setHealth(ThanosHealth.getValue()-10);
            ThanosHealth.setValue(ThanosHealth.getValue()-10);
        } else {
            timers[timerSnapThanos].stop();
        }
    }
    
    private void ThanosSnapAnt()
    {
        if(AntHealth.getValue() > newHealth+1)
        {
            characters.get(indexAntman).setHealth(AntHealth.getValue()+10);
            AntHealth.setValue(AntHealth.getValue()-10);
        } else {
            timers[timerSnapAnt].stop();
        }
    }
    
    private void ThanosHealthIncrease()
    {
        if(ThanosHealth.getValue() < 1000)
        {
            characters.get(indexThanos).setHealth(ThanosHealth.getValue()+10);
            ThanosHealth.setValue(ThanosHealth.getValue()+10);
        } else {
            timers[timerThanosHealth].stop();
            enableButtons(true);
        }
    }
    
    private void AntmanHealthChange()
    {
        if(AntHealth.getValue() > newHealth+2)
        {
            characters.get(indexAntman).setHealth(AntHealth.getValue()-10);
            AntHealth.setValue(AntHealth.getValue()-10);
        } else {
            timers[timerAnt].stop();
            enableButtons(true);
        }
    }
    
    private void AntmanHealthPowerChange()
    {
        if(AntHealth.getValue() > newHealth+2)
        {
            characters.get(indexAntman).setHealth(AntHealth.getValue()-10);
            AntHealth.setValue(AntHealth.getValue()-10);
        } else {
            timers[timerAntPower].stop();
            enableButtons(true);
        }
    }
    
    private void AntmanHealthSlapDecrease()
    {
        if(AntHealth.getValue() > newHealth+2)
        {
            characters.get(indexAntman).setHealth(AntHealth.getValue()-10);
            AntHealth.setValue(AntHealth.getValue()-10);
        } else {
            timers[timerAntSlap].stop();
        }
    }
    
    private void AntmanHealthPunchDecrease()
    {
        if(AntHealth.getValue() > newHealth+2)
        {
            characters.get(indexAntman).setHealth(AntHealth.getValue()-10);
            AntHealth.setValue(AntHealth.getValue()-10);
        } else {
            timers[timerAntPunch].stop();
        }
    }
    
    private void ThanosAttack()
    {
        timers[timerT] = new Timer(3500, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                ThanosAttackChoice();
            }
        } );
        timers[timerT].start();
    }
    
    private void ThanosAttackChoice()
    {
        int stoneAttack = (int)(Math.random()*13);
        System.out.println(stoneAttack);
        if(stoneAttack == 0 || stoneAttack == 1)
        {
            timers[timerThanosHealth] = new Timer(10, new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    ThanosHealthIncrease();
                }
            } );
            timers[timerThanosHealth].start();
            characters.get(indexThanos).setHealth(1000);
            GameDisplay.setText( characters.get(indexThanos).getName() + " used the Time Stone" );
            SecondGameDisplay.setText( characters.get(indexThanos).getName() + " recovered all his HP" );
            timers[timerT].stop();
            return;
        }
        if(stoneAttack == 2 || stoneAttack == 3)
        {
            GameDisplay.setText( characters.get(indexThanos).getName() + " used the Soul Stone" );
            SecondGameDisplay.setText( characters.get(indexThanos).getName() + " has stolen your soul!" );
            newHealth = 0;
            timers[timerAnt] = new Timer(10, new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    AntmanHealthChange();
                    if(characters.get(indexAntman).getHealth() <= 0)
                        checkGameState();
                }
            } );
            timers[timerAnt].start();
            timers[timerT].stop();
            return;
        }
        if(stoneAttack == 4 || stoneAttack == 5)
        {
            GameDisplay.setText( characters.get(indexThanos).getName() + " used the Reality Stone" );
            SecondGameDisplay.setText( characters.get(indexThanos).getName() + " takes another turn" );
            timers[timerT].stop();
            ThanosAttack();
            return;
        }
        if(stoneAttack == 6 || stoneAttack == 7)
        {
            GameDisplay.setText( characters.get(indexThanos).getName() + " used the Space Stone" );
            SecondGameDisplay.setText( characters.get(indexThanos).getName() + " has become untargetable" );
            thanosTarget = true;
            timers[timerT].stop();
            enableButtons(true);
            return;
        }
        if(stoneAttack == 8 || stoneAttack == 9)
        {
            GameDisplay.setText( characters.get(indexThanos).getName() + " used the Mind Stone" );
            SecondGameDisplay.setText( characters.get(indexThanos).getName() + " now controls you" );
            mindControl = true;
            timers[timerT].stop();
            enableButtons(true);
            return;
        }
        if(stoneAttack == 10 || stoneAttack == 11)
        {
            GameDisplay.setText( characters.get(indexThanos).getName() + " used the Power Stone" );
            SecondGameDisplay.setText( characters.get(indexThanos).getName() + " destroyed half your life!" );
            newHealth = AntHealth.getValue()/2;
            if(characters.get(indexAntman).getHealth() <= 75)
            {
                newHealth = 0;
            }
            timers[timerAntPower] = new Timer(10, new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    AntmanHealthPowerChange();
                    if(characters.get(indexAntman).getHealth() == 0)
                        checkGameState();
                }
            } );
            timers[timerAntPower].start();
            timers[timerT].stop();
            return;
        }
        if( stoneAttack == 12 )
        {
            GameDisplay.setText( characters.get(indexThanos).getName() + " used Snap" );
            int random = (int)(Math.random()*2);
            if(random == 0)
            {
                SecondGameDisplay.setText( characters.get(indexThanos).getName() + " has killed himself" );
                newHealth = 0;
                timers[timerSnapThanos] = new Timer(10, new ActionListener() {
                    @Override
                    public void actionPerformed(ActionEvent e) {
                        ThanosSnapThanos();
                        if(characters.get(indexThanos).getHealth() == 0)
                            checkGameState();
                    }
                } );
                timers[timerSnapThanos].start();
                timers[timerT].stop();
                return;
            }
            if(random == 1)
            {
                SecondGameDisplay.setText( characters.get(indexThanos).getName() + " has killed you" );
                newHealth = 0;
                timers[timerSnapAnt] = new Timer(10, new ActionListener() {
                    @Override
                    public void actionPerformed(ActionEvent e) {
                        ThanosSnapAnt();
                        if(characters.get(indexAntman).getHealth() == 0)
                            checkGameState();
                    }
                } );
                timers[timerSnapAnt].start();
                timers[timerT].stop();
                return;
            }
            return;
        }
    }
    
    private void enableButtons( boolean flag )
    {
        Slap.setEnabled(flag);
        Shrink.setEnabled(flag);
        Punch.setEnabled(flag);
        Expand.setEnabled(flag);
    }
    
    private void checkGameState()
    {
        EndDefeatScreen defeat = new EndDefeatScreen();
        EndVictoryScreen victory = new EndVictoryScreen();
        if(characters.get(indexThanos).getHealth() == 0 && !victoryLaunch)
        {
            victory.setBounds(0, 0, 646, 658);
            victory.setVisible(true);
            setVisible(false);
            victoryLaunch = true;
        }
        if(characters.get(indexAntman).getHealth() == 0 && !defeatLaunch)
        {
            defeat.setBounds(0, 0, 646, 658);
            defeat.setVisible(true);
            setVisible(false);
            defeatLaunch = true;
        }
    }
            
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AntmanScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AntmanScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AntmanScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AntmanScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AntmanScreen().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public static javax.swing.JProgressBar AntHealth;
    private javax.swing.JLabel Antman;
    private javax.swing.JLabel Background;
    public static javax.swing.JButton Expand;
    public static javax.swing.JTextField GameDisplay;
    public static javax.swing.JTextField GameDisplay1;
    public static javax.swing.JButton Punch;
    private javax.swing.JTextField SecondGameDisplay;
    public static javax.swing.JButton Shrink;
    public static javax.swing.JButton Slap;
    private javax.swing.JLabel Thanos;
    private javax.swing.JTextField ThanosHeader;
    public static javax.swing.JProgressBar ThanosHealth;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
